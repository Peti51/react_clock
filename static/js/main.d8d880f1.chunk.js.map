{"version":3,"sources":["App.tsx","index.tsx"],"names":["getRandomName","value","Date","now","toString","slice","App","state","time","timerName","hasClock","timerID","clockShow","event","preventDefault","button","setState","window","addEventListener","this","setInterval","toLocaleTimeString","prevProps","prevState","console","info","debug","clearInterval","document","removeEventListener","className","React","Component","ReactDOM","render","getElementById"],"mappings":"sNAKA,SAASA,IACP,IAAMC,EAAQC,KAAKC,MAAMC,WAAWC,OAAO,GAE3C,MAAM,SAAN,OAAgBJ,GAWX,IAAMK,EAAb,4MACEC,MAAQ,CACNC,KAAM,GACNC,UAAW,UACXC,UAAU,GAJd,EAOEC,QAAU,EAPZ,EAyCEC,UAAY,SAACC,GACXA,EAAMC,iBAEe,IAAjBD,EAAME,OACR,EAAKC,SAAS,CAAEN,UAAU,IAE1B,EAAKM,SAAS,CAAEN,UAAU,KA/ChC,uDASE,WAAqB,IAAD,OAClBO,OAAOC,iBAAiB,YAAaC,KAAKP,WAE1CO,KAAKR,QAAUM,OAAOG,aAAY,WAChC,EAAKJ,SAAU,CAAEP,UAAWT,QAE3B,MAEHiB,OAAOG,aAAY,WACjB,IAAMZ,GAAO,IAAIN,MAAOmB,qBAExB,EAAKL,SAAS,CAAER,WACf,OArBP,gCAwBE,SAAmBc,EAAkBC,IACP,IAAxBJ,KAAKZ,MAAMG,UACVS,KAAKZ,MAAMC,OAASe,EAAUf,MAAQc,GACzCE,QAAQC,KAAKN,KAAKZ,MAAMC,OAGE,IAAxBW,KAAKZ,MAAMG,UACVS,KAAKZ,MAAME,YAAcc,EAAUd,WAAaa,GACnDE,QAAQE,MAAR,uBAA8BH,EAAUd,UAAxC,eAAwDU,KAAKZ,MAAME,cAhCzE,kCAoCE,WACEkB,cAAcR,KAAKR,SACnBiB,SAASC,oBAAoB,YAAaV,KAAKP,aAtCnD,oBAmDE,WACE,OACE,sBAAKkB,UAAU,MAAf,UACE,6CAEEX,KAAKZ,MAAMG,UACX,sBAAKoB,UAAU,QAAf,UACE,wBAAQA,UAAU,cAAlB,SACGX,KAAKZ,MAAME,YAGb,YAED,sBAAMqB,UAAU,cAAhB,SACGX,KAAKZ,MAAMC,iBAjE1B,GAAyBuB,IAAMC,WChB/BC,IAASC,OACP,cAAC,EAAD,IACAN,SAASO,eAAe,W","file":"static/js/main.d8d880f1.chunk.js","sourcesContent":["/* eslint-disable no-console */\nimport React from 'react';\n// import { render } from 'react-dom';\nimport './App.scss';\n\nfunction getRandomName(): string {\n  const value = Date.now().toString().slice(-4);\n\n  return `Clock-${value}`;\n}\n\ntype Props = {};\n\ntype State = {\n  time: string;\n  timerName: string,\n  hasClock: boolean,\n};\n\nexport class App extends React.Component<Props, State> {\n  state = {\n    time: '',\n    timerName: 'Clock-0',\n    hasClock: true,\n  };\n\n  timerID = 0;\n\n  componentDidMount() {\n    window.addEventListener('mousedown', this.clockShow);\n\n    this.timerID = window.setInterval(() => {\n      this.setState(({ timerName: getRandomName() }\n      ));\n    }, 3300);\n\n    window.setInterval(() => {\n      const time = new Date().toLocaleTimeString();\n\n      this.setState({ time });\n    }, 1000);\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (this.state.hasClock === true\n      && this.state.time !== prevState.time && prevProps) {\n      console.info(this.state.time);\n    }\n\n    if (this.state.hasClock === true\n      && this.state.timerName !== prevState.timerName && prevProps) {\n      console.debug(`Renamed from ${prevState.timerName} to ${this.state.timerName}`);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n    document.removeEventListener('mousedown', this.clockShow);\n  }\n\n  clockShow = (event: MouseEvent) => {\n    event.preventDefault();\n\n    if (event.button === 2) {\n      this.setState({ hasClock: false });\n    } else {\n      this.setState({ hasClock: true });\n    }\n  };\n\n  render(): React.ReactNode {\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n\n        { this.state.hasClock && (\n          <div className=\"Clock\">\n            <strong className=\"Clock__name\">\n              {this.state.timerName}\n            </strong>\n\n            {' time is '}\n\n            <span className=\"Clock__time\">\n              {this.state.time}\n            </span>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}